using DesayunoAsync.Console.Models;

namespace DesayunoAsync.Console.Services;

/// <summary>
/// Servicio de cocina as√≠ncrono
/// Equivalente a CompletableFuture en Java
/// 
/// En Java:
/// CompletableFuture<Ingrediente> prepararCafe() {
///     return CompletableFuture.supplyAsync(() -> {...});
/// }
/// 
/// En C#:
/// async Task<Ingrediente> PrepararCafeAsync() {
///     await Task.Delay(tiempo);
///     return cafe;
/// }
/// </summary>
public class CocinaService
{
    public async Task<Ingrediente> PrepararCafeAsync()
    {
        System.Console.WriteLine("‚òï Preparando caf√©...");
        await Task.Delay(1000); // Simula preparaci√≥n
        System.Console.WriteLine("‚úÖ Caf√© listo");
        return new Ingrediente { Nombre = "Caf√©", TiempoPreparacion = 1000 };
    }

    public async Task<Ingrediente> PrepararHuevosAsync()
    {
        System.Console.WriteLine("üç≥ Preparando huevos...");
        await Task.Delay(2000);
        System.Console.WriteLine("‚úÖ Huevos listos");
        return new Ingrediente { Nombre = "Huevos", TiempoPreparacion = 2000 };
    }

    public async Task<Ingrediente> PrepararTocinAsync()
    {
        System.Console.WriteLine("ü•ì Preparando tocino...");
        await Task.Delay(1500);
        System.Console.WriteLine("‚úÖ Tocino listo");
        return new Ingrediente { Nombre = "Tocino", TiempoPreparacion = 1500 };
    }

    public async Task<Ingrediente> PrepararPanAsync()
    {
        System.Console.WriteLine("üçû Preparando pan tostado...");
        await Task.Delay(500);
        System.Console.WriteLine("‚úÖ Pan listo");
        return new Ingrediente { Nombre = "Pan Tostado", TiempoPreparacion = 500 };
    }
}

public class DesayunoService
{
    private readonly CocinaService _cocina = new();

    /// <summary>
    /// Preparaci√≥n S√çNCRONA (mala pr√°ctica)
    /// En Java: m√©todo normal sin CompletableFuture
    /// </summary>
    public async Task<Desayuno> PrepararDesayunoSincronoAsync()
    {
        System.Console.WriteLine("\nüî¥ PREPARACI√ìN S√çNCRONA (secuencial, lenta):");
        var inicio = DateTime.Now;

        var cafe = await _cocina.PrepararCafeAsync();
        var huevos = await _cocina.PrepararHuevosAsync();
        var tocino = await _cocina.PrepararTocinAsync();
        var pan = await _cocina.PrepararPanAsync();

        var duracion = (DateTime.Now - inicio).TotalMilliseconds;
        System.Console.WriteLine($"‚è±Ô∏è  Tiempo total: {duracion}ms\n");

        return new Desayuno
        {
            Componentes = new List<string> { cafe.Nombre, huevos.Nombre, tocino.Nombre, pan.Nombre }
        };
    }

    /// <summary>
    /// Preparaci√≥n AS√çNCRONA PARALELA (mejor pr√°ctica)
    /// En Java: CompletableFuture.allOf(...).join()
    /// En C#: Task.WhenAll(...)
    /// </summary>
    public async Task<Desayuno> PrepararDesayunoParaleloAsync()
    {
        System.Console.WriteLine("\nüü¢ PREPARACI√ìN AS√çNCRONA (paralela, r√°pida):");
        var inicio = DateTime.Now;

        // Iniciar todas las tareas en paralelo
        var tareasCafe = _cocina.PrepararCafeAsync();
        var tareasHuevos = _cocina.PrepararHuevosAsync();
        var tareasTocino = _cocina.PrepararTocinAsync();
        var tareasPan = _cocina.PrepararPanAsync();

        // Esperar a que todas terminen
        var resultados = await Task.WhenAll(tareasCafe, tareasHuevos, tareasTocino, tareasPan);

        var duracion = (DateTime.Now - inicio).TotalMilliseconds;
        System.Console.WriteLine($"‚è±Ô∏è  Tiempo total: {duracion}ms\n");

        return new Desayuno
        {
            Componentes = resultados.Select(r => r.Nombre).ToList()
        };
    }
}
